#Créer une zone pour les fichiers (une fois. Je l'ais mis dans mon HOME)
#mkdir VirtualEnv

#Aller dans cette zone
#cd VirtualEnv

#Créer les fichiers de l'environnement virtuel (une seule fois!)
#python3 -m venv myvenv
#Déjà fait



#Démarrer l'environnement virtuel
source myvenv/bin/activate

#ENV#Quitter l'environnement virtuel
deactivate





#ENV#installer django dans l’environnement virtuel
pip3 install django



#ENV# Aller dans le projet
cd /net/cremi/ggressier/espaces/travail/M1/PDP_TROU_NOIR/pdp-blackhole

#ENV# Créer le site "mysite"
django-admin startproject mysite

#le premier repertoire "mysite" peut être changé sans problèmes
#je l'ai donc changé en "mysite-pdp"

#ENV# Créer l'application "polls", dans le repertoire "mysite-pdp"
python manage.py startapp polls

# "To create your app, make sure you’re in the same directory as manage.py"




#ENV# Lancer le site
python mysite-pdp/manage.py runserver

#ENV# Lancer le site avec un numéro de port spécifique
python mysite-pdp/manage.py runserver 8080

#ENV# Lancer le site avec une adresse IP et un numéro de port spécifique
python mysite-pdp/manage.py runserver 10.0.7.14:8000



#ENV# Créer les tables de la base de données des applications par défaut
python manage.py migrate


#Lancer sqlite en ligne de commande
sqlite3 db.sqlite3

#SQLite# Montrer les migrations
.schema 


# modification du fichier mysite/settings.py et INSTALLED_APPS
#ENV# Ajouter mon module et migrer les éléments (à faire au changement des modeles)

python manage.py makemigrations polls
"
Migrations for 'polls':
  polls/migrations/0001_initial.py
    - Create model Choice
    - Create model Question
    - Add field question to choice
"


#ENV# Utilise le fichier de migration pour générer puis montrer le script à exécuter
python manage.py sqlmigrate polls 0001

#Ce qui donne :
BEGIN;
--
-- Create model Choice
--
CREATE TABLE "polls_choice" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "choice_text" varchar(200) NOT NULL, "votes" integer NOT NULL);
--
-- Create model Question
--
CREATE TABLE "polls_question" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "question_text" varchar(200) NOT NULL, "pub_date" datetime NOT NULL);
--
-- Add field question to choice
--
ALTER TABLE "polls_choice" RENAME TO "polls_choice__old";
CREATE TABLE "polls_choice" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "choice_text" varchar(200) NOT NULL, "votes" integer NOT NULL, "question_id" integer NOT NULL REFERENCES "polls_question" ("id") DEFERRABLE INITIALLY DEFERRED);
INSERT INTO "polls_choice" ("question_id", "votes", "choice_text", "id") SELECT NULL, "votes", "choice_text", "id" FROM "polls_choice__old";
DROP TABLE "polls_choice__old";
CREATE INDEX "polls_choice_question_id_c5b4b260" ON "polls_choice" ("question_id");
COMMIT;
####



#ENV# Vérifie s'il y a des problemes sans affecter la BD
python manage.py check

#ENV# Modifie la BD en faisant la migration, modifie tout ce qui doit être mis à jour
python manage.py migrate






# (1) Change your models (in models.py).
# (2) Run "python manage.py makemigrations" to create migrations for those changes
# (3) Run "python manage.py migrate" to apply those changes to the database.


#ENV# Donne accès à l'api BD en ligne de commandes
python manage.py shell


#SHELL# Il faut importer les éléments que l'on veut manipuler
from polls.models import Choice, Question

#SHELL# On peut ajouter des élément (Question)
from django.utils import timezone
q = Question(question_text="What's new?", pub_date=timezone.now())

#SHELL# On peut modfier les composants des élément (question_text et pub_date)
q.question_text = "What's up?"

#SHELL# Il faut sauvegarder les éléments après schaque modification
q.save()
#(nécessite référence directe)

#SHELL# On peut observer tout les éléments de la base de données
Question.objects.all()


#SHELL# On peut filtrer les objets par ID (id)
Question.objects.filter(id=1)

#SHELL# On peut filtrer les objets par texte(__startswith)
Question.objects.filter(question_text__startswith='What')

#SHELL# On peut récupérer les objets par dates (_year)
from django.utils import timezone
current_year = timezone.now().year
Question.objects.get(pub_date__year=current_year)

#SHELL# Faire un "get" impossible renvoie une exception
Question.objects.get(id=2)

#SHELL# On peut aussi récupérer par "primary key", comme id
Question.objects.get(pk=1)


#SHELL# Création et manipulation d'un objet "choice_set"
q = Question.objects.get(pk=1) #cible une question
q.choice_set.all() #montre que c'est vide
q.choice_set.create(choice_text='Not much', votes=0) #crée
q.choice_set.create(choice_text='The sky', votes=0) #crée
c = q.choice_set.create(choice_text='Just hacking again', votes=0)

c.question.question_text # montre que c'est connecté

#SHELL# Nombre d'éléments
q.choice_set.count()


#SHELL# L'api va aussi loin qu'il faut dans les relations avec "__"
Choice.objects.filter(question__pub_date__year=current_year)
#Liste des "Choice" => cibler les questions => cibler leur date de publication => cibler l'année


#SHELL# Supprimer un élément (nécessite référence directe)
c = q.choice_set.create(choice_text='XD', votes=0)
c.delete()



#ENV# Création d'un admin
python manage.py createsuperuser

admin # Username
admin@example.com # Email address
admin # Password
# at least 8 characters










